import React, { useEffect, useState } from 'react';
import { useMediaQuery } from 'react-responsive';
import styles from '@/styles/Daerogi.module.sass';

interface Props {
  totalReward: number;
  correctionReward: number;
}

const thresholds = [
  { count: 0, score: 0 },
  { count: 1, score: 40000 },
  { count: 2, score: 150000 },
  { count: 3, score: 540000 },
  { count: 4, score: 660000 },
  { count: 5, score: 1000000 },
  { count: 6, score: 2300000 },
  { count: 7, score: 2600000 },
  { count: 8, score: 3600000 },
  { count: 9, score: 7200000 },
];

export function useMobile() {
  const [isMobile, setIsMobile] = useState(false);
  const mobile = useMediaQuery({
    query: `(max-width: ${991 / 16}rem)`,
  });
  useEffect(() => {
    setIsMobile(mobile);
  }, [mobile]);
  return isMobile;
}

export default function ProgressBar({ totalReward, correctionReward }: Props) {
  const progressPercentage = Math.min((totalReward / 7200000) * 100, 100);
  const stepPercentage = 100 / (thresholds.length - 1);
  const isMobile = useMobile();

  return (
    <div className={styles['progress-container']}>
      <div className={styles['progress-bar']}>
        <div
          className={styles['progress-fill']}
          style={{
            width: !isMobile ? `${progressPercentage}%` : undefined,
            height: isMobile ? `${progressPercentage}%` : undefined,
          }}
        />
        {thresholds.map((threshold, index) => (
          <div
            key={threshold.count}
            className={`${styles['progress-box']} ${correctionReward >= threshold.score ? styles.open : ''}`}
            style={{
              left: !isMobile ? `${stepPercentage * index}%` : undefined,
              top: isMobile ? `${stepPercentage * index}%` : undefined,
            }}
          >
            {threshold.count > 0 && (
              <>
                {correctionReward >= threshold.score ? (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M12 7.004C9.65195 7.004 8.42395 5.839 8.29195 5.706C7.90195 5.314 7.90295 4.682 8.29495 4.292C8.68195 3.903 9.30795 3.903 9.69895 4.284C9.74695 4.33 10.501 5.004 12 5.004C13.518 5.004 14.271 4.313 14.303 4.283C14.702 3.909 15.331 3.917 15.712 4.309C16.092 4.701 16.094 5.319 15.709 5.705C15.576 5.839 14.348 7.004 12 7.004ZM9.99995 1C9.73473 1 9.48038 1.10536 9.29284 1.29289C9.10531 1.48043 8.99995 1.73478 8.99995 2C8.99995 2.26522 9.10531 2.51957 9.29284 2.70711C9.48038 2.89464 9.73473 3 9.99995 3C10.2652 3 10.5195 2.89464 10.7071 2.70711C10.8946 2.51957 11 2.26522 11 2C11 1.73478 10.8946 1.48043 10.7071 1.29289C10.5195 1.10536 10.2652 1 9.99995 1ZM14 1C13.7347 1 13.4804 1.10536 13.2928 1.29289C13.1053 1.48043 13 1.73478 13 2C13 2.26522 13.1053 2.51957 13.2928 2.70711C13.4804 2.89464 13.7347 3 14 3C14.2652 3 14.5195 2.89464 14.7071 2.70711C14.8946 2.51957 15 2.26522 15 2C15 1.73478 14.8946 1.48043 14.7071 1.29289C14.5195 1.10536 14.2652 1 14 1ZM22.83 12.45L20.83 9.45C20.814 9.424 20.7879 9.405 20.7689 9.381C20.7399 9.345 20.713 9.311 20.68 9.28C20.596 9.2 20.502 9.129 20.4 9.081L16.7099 7.481C16.2599 7.831 15.48 8.331 14.38 8.661L17.327 9.935L12 11.932L6.69395 9.942L9.66995 8.68C8.56995 8.35 7.77995 7.86 7.31995 7.5L3.60995 9.08C3.60495 9.082 3.60195 9.085 3.59795 9.088C3.57895 9.096 3.56395 9.11 3.54495 9.12C3.46395 9.163 3.38895 9.215 3.32195 9.278C3.28895 9.31 3.26095 9.344 3.23095 9.381C3.21195 9.405 3.18695 9.423 3.16995 9.45L1.16995 12.45C0.99995 12.7 0.94995 13.02 1.04995 13.31C1.13995 13.6 1.35995 13.83 1.64995 13.94L2.99995 14.446V19C2.99995 19.417 3.25895 19.79 3.64895 19.937L11.649 22.937C11.762 22.979 11.881 23 12 23C12.119 23 12.238 22.979 12.351 22.937L20.351 19.937C20.741 19.79 21 19.417 21 19V14.516L22.3899 13.92C22.6699 13.8 22.8699 13.57 22.9599 13.29C23.0399 13 23 12.69 22.83 12.45ZM20.5 12.55L15.2299 14.81L13.81 13.39L19.608 11.216L20.5 12.55ZM9.60995 14.79L3.52995 12.51L4.39295 11.216L10.4729 13.496L9.60995 14.79Z"
                      fill="white"
                    />
                  </svg>
                ) : (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M12.0039 1.92582C11.6684 1.9237 11.3384 1.99939 11.0469 2.15239L2.98633 5.98051C2.38333 6.26751 2 6.87601 2 7.54301V16.2149C2 16.9869 2.44458 17.6905 3.14258 18.0215L11 21.7481V10.8067L4.29492 7.52934L7.16406 6.18168L15.1074 9.89262L13 10.8633L13.0039 21.752L20.8574 18.0196C21.5554 17.6886 22 16.9859 22 16.2129V7.54301C22 6.87501 21.6167 6.26751 21.0137 5.98051L12.9902 2.17192C12.6797 2.00842 12.3394 1.92795 12.0039 1.92582ZM11.9395 3.94145C11.9765 3.92145 12.0217 3.92098 12.0957 3.96098L20.1328 7.57426L17.4824 8.79692L9.52148 5.07622L11.9395 3.94145Z"
                      fill="white"
                    />
                  </svg>
                )}
              </>
            )}
            <span>{threshold.count}ÏÉÅ</span>
          </div>
        ))}
        {thresholds.map((threshold, index) => (
          <div
            key={threshold.count}
            className={`${styles['progress-score']} ${correctionReward >= threshold.score ? styles.open : ''}`}
            style={{
              left: !isMobile ? `${stepPercentage * index}%` : undefined,
              top: isMobile ? `${stepPercentage * index}%` : undefined,
            }}
          >
            {threshold.score === 0 && isMobile && <div className={styles.dummy} />}
            {threshold.score > 0 && (
              <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M3 12.453C3 7.48244 7.02944 3.453 12 3.453V3.453C16.9706 3.453 21 7.48244 21 12.453V12.453C21 17.4236 16.9706 21.453 12 21.453V21.453C7.02944 21.453 3 17.4236 3 12.453V12.453Z"
                  fill="#BF6C22"
                />
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M4 12.453C4 16.8713 7.58172 20.453 12 20.453C16.4183 20.453 20 16.8713 20 12.453C20 8.03473 16.4183 4.453 12 4.453C7.58172 4.453 4 8.03473 4 12.453ZM12 3.453C7.02944 3.453 3 7.48244 3 12.453C3 17.4236 7.02944 21.453 12 21.453C16.9706 21.453 21 17.4236 21 12.453C21 7.48244 16.9706 3.453 12 3.453Z"
                  fill="#FFF2C9"
                />
                <path
                  d="M16.432 9.12222C16.2857 9.12568 16.1466 9.18684 16.0452 9.29236L11.9988 13.3387L7.95244 9.29236C7.90074 9.23921 7.8389 9.19696 7.7706 9.16811C7.70229 9.13926 7.62889 9.1244 7.55474 9.12439C7.44437 9.12442 7.33651 9.15737 7.24496 9.21902C7.1534 9.28066 7.08232 9.36822 7.04078 9.47048C6.99925 9.57274 6.98916 9.68507 7.0118 9.79309C7.03444 9.90112 7.08878 9.99994 7.16788 10.0769L11.6065 14.5156C11.7106 14.6196 11.8517 14.678 11.9988 14.678C12.1459 14.678 12.287 14.6196 12.3911 14.5156L16.8297 10.0769C16.9103 9.99944 16.9656 9.89943 16.9884 9.78998C17.0111 9.68054 17.0003 9.56677 16.9573 9.46358C16.9143 9.36039 16.8412 9.27259 16.7475 9.21168C16.6537 9.15077 16.5438 9.11959 16.432 9.12222ZM16.432 12.4512C16.2857 12.4547 16.1466 12.5158 16.0452 12.6213L11.9988 16.6677L7.95244 12.6213C7.90074 12.5682 7.8389 12.5259 7.7706 12.4971C7.70229 12.4682 7.62889 12.4534 7.55474 12.4534C7.44437 12.4534 7.33651 12.4863 7.24496 12.548C7.1534 12.6096 7.08232 12.6972 7.04078 12.7995C6.99925 12.9017 6.98916 13.014 7.0118 13.1221C7.03444 13.2301 7.08878 13.3289 7.16788 13.4059L11.6065 17.8445C11.7106 17.9486 11.8517 18.007 11.9988 18.007C12.1459 18.007 12.287 17.9486 12.3911 17.8445L16.8297 13.4059C16.9103 13.3284 16.9656 13.2284 16.9884 13.119C17.0111 13.0095 17.0003 12.8958 16.9573 12.7926C16.9143 12.6894 16.8412 12.6016 16.7475 12.5407C16.6537 12.4797 16.5438 12.4486 16.432 12.4512Z"
                  fill="#FFF2C9"
                />
              </svg>
            )}
            <span>{threshold.score.toLocaleString()}</span>
          </div>
        ))}
      </div>
    </div>
  );
}
